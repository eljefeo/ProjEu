import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Problem61 {
	
	/*
	 Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle P3,n=n(n+1)/2 1, 3, 6, 10, 15, ...
Square P4,n=n^2 1, 4, 9, 16, 25, ...
Pentagonal P5,n=n(3n-1)/2 1, 5, 12, 22, 35, ...
Hexagonal P6,n=n(2-1) 1, 6, 15, 28, 45, ...
Heptagonal P7,n=n(5n-3)/2 1, 7, 18, 34, 55, ...
Octagonal P8,n=n(3n-2) 1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
	 */
	
	
	static int triFirst = 0, triLast = 0;
	static int squareFirst = 0, squareLast = 0;
	static int pentFirst = 0, pentLast = 0;
	static int hexFirst = 0, hexLast = 0;
	static int hepFirst = 0, hepLast = 0;
	static int octFirst = 0, octLast = 0;
	

	public static void main(String[] args) {
			problem();
	}

	private static void problem() {
		//start finding triangle numbers that are 4 digits....
		// as we get one... we get the last 2 digits and use those as the first 2 digits for a second number
		// we then go through all 100 other 4 digit numbers that start with those first 2 digits, checking along the way if they are sqaure, pentagonal, hexagonal, heptagonal, or octagonal
		// if we find one of the above.. we then use the last 2 digits of that number to go through the other 100 possible nums and check if they are other polygonal numbers, 
		//until we find one that goes all the way through all polygonal (triangle through octogonal)
		// and make sure the last one is cyclic with the first one...
		
		
		getFirstAndLastIndexes();
		Map<Integer, List<Integer>> allNums = getAll4DigitPolygonalNumbers();
		
	//	int trin = 44;
		
		//System.out.println("triangle number " + trin + " is " + Util.getTriangleNumber(trin));
		
		
		
		System.out.println("tri number  is " + Util.getNthTriangleNumber(3));
		System.out.println("square number  is " + Util.getNthSquareNumber(3));
		System.out.println("pent number  is " + Util.getNthPentagonalNumber(3));
		System.out.println("hex number  is " + Util.getNthHexagonalNumber(3));
		System.out.println("hep number  is " + Util.getNthHeptagonalNumber(3));
		System.out.println("oct number  is " + Util.getNthOctagonalNumber(3));
		// get first 4 digit triangle num
		
		
		//int firstTriNumDetails[] = getFirst4DigitTriangleNumber();
		//int first4dTriNum = firstTriNumDetails[0];
		//int first4dTriIndex = firstTriNumDetails[1];
		
		
		//System.out.println("First 4 digit triangle number is " + first4dTriNum + " at index " + first4dTriIndex);
		
		// so now we get the last 2 digits of this first tri num
		//String last2OfTri = getLast2Digits(first4dTriNum);
		//String first2OfTri = getFirst2Digits(first4dTriNum);
		//System.out.println("Last 2 digits of tri num : " + last2OfTri + " and first 2 are : " + first2OfTri);
		
		
		// now we have the last 2 digits... we want to find another polygonal number that starts with those first 2...
		
		
	
		
		
		
	}
	
	
	public static int getAPolygonalNumber(int which, int ind) {
		
		int num = 0;
		
		
		switch (which) {
		case 3:
			num = Util.getNthTriangleNumber(ind);
			break;
			
		case 4:
			num = Util.getNthSquareNumber(ind);
			break;
			
		case 5:
			num = Util.getNthPentagonalNumber(ind);
			break;
			
		case 6:
			num = Util.getNthHexagonalNumber(ind);
			break;
			
		case 7:
			num = Util.getNthHeptagonalNumber(ind);
			break;
			
		case 8:
			num = Util.getNthOctagonalNumber(ind);
			break;
			
		default:
			break;
		}
		
		
	}
	
	public static void magic() {
		
		Map<Integer, Boolean> track = new HashMap<Integer, Boolean>();
		
		
		for(int i = triFirst; i <= triLast; i++) {
			int ti = Util.getNthTriangleNumber(i);
			track.put(3, true);
			
			int sq = get4DigitSquareNumberThatStartsWith(ti);
			if(sq != 0) {
				
			}
			
		}
	}
	
	
	public static Map<Integer, List<Integer>>getAll4DigitPolygonalNumbers(){
		Map<Integer, List<Integer>> all = new HashMap<Integer, List<Integer>>();
		
		List<Integer> tri = new ArrayList<Integer>();
		List<Integer> sq = new ArrayList<Integer>();
		List<Integer> pent = new ArrayList<Integer>();
		List<Integer> hex = new ArrayList<Integer>();
		List<Integer> hep = new ArrayList<Integer>();
		List<Integer> oct = new ArrayList<Integer>();
		
		for(int i=triFirst; i<=triLast; i++) {
			tri.add(Util.getNthTriangleNumber(i));
		}
		all.put(3, tri);
		
		for(int i=squareFirst; i<=squareLast; i++) {
			sq.add(Util.getNthSquareNumber(i));
		}
		all.put(4, sq);
		
		for(int i=pentFirst; i<=pentLast; i++) {
			pent.add(Util.getNthPentagonalNumber(i));
		}
		all.put(5, pent);
		
		for(int i=hexFirst; i<=hexLast; i++) {
			hex.add(Util.getNthHexagonalNumber(i));
		}
		all.put(6, hex);
		
		for(int i=hepFirst; i<=hepLast; i++) {
			hep.add(Util.getNthHeptagonalNumber(i));
		}
		all.put(7, hep);
		
		
		for(int i=octFirst; i<=octLast; i++) {
			oct.add(Util.getNthOctagonalNumber(i));
		}
		all.put(8, oct);
		

		
		
		
		return all;
	}
	

	
	
	public static int get4DigitSquareNumberThatStartsWith(int start) {
		//int first4dSquareIndex = fDetails[1];
		for(int i = squareFirst; i <= squareLast; i++) {
			int s = Util.getNthSquareNumber(i);
			if(getFirst2Digits(s).equals(getLast2Digits(start))){
				return s;
			}
		}
		
		return 0;
	}
	
	public static int getFirst4DigitTriangleNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFourDigits(f)) {
			index++;
			f = Util.getNthTriangleNumber(index);
		}
		//return new int[] {first4dTriNum, index};
		return index;
	}
	
	public static int getLast4DigitTriangleNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFiveDigits(f)) {
			index++;
			f = Util.getNthTriangleNumber(index);
		}
		//return new int[] {f, index};
		return index-1;
		
	}
	
	public static int getFirst4DigitSquareNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFourDigits(f)) {
			index++;
			f = Util.getNthSquareNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index;
	}
	
	public static int getLast4DigitSquareNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFiveDigits(f)) {
			index++;
			f = Util.getNthSquareNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index-1;
	}
	
	public static int getFirst4DigitPentagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFourDigits(f)) {
			index++;
			f = Util.getNthPentagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index;
	}
	
	public static int getLast4DigitPentagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFiveDigits(f)) {
			index++;
			f = Util.getNthPentagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index-1;
	}
	
	public static int getFirst4DigitHexagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFourDigits(f)) {
			index++;
			f = Util.getNthHexagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index;
	}
	
	public static int getLast4DigitHexagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFiveDigits(f)) {
			index++;
			f = Util.getNthHexagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index-1;
	}
	
	public static int getFirst4DigitHeptagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFourDigits(f)) {
			index++;
			f = Util.getNthHeptagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index;
	}
	
	public static int getLast4DigitHeptagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFiveDigits(f)) {
			index++;
			f = Util.getNthHeptagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index-1;
	}
	
	public static int getFirst4DigitOctagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFourDigits(f)) {
			index++;
			f = Util.getNthOctagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index;
	}
	
	public static int getLast4DigitOctagonalNumberIndex() {
		int f = 0;
		int index = 0;
		while (!isFiveDigits(f)) {
			index++;
			f = Util.getNthOctagonalNumber(index);
		}
		//return new int[] {first4dSqaureNum, index};
		return index-1;
	}
	
	public static String getLast2Digits(int n) {
		String ns = n+"";
		if(ns.length() < 2) {
			return "";
		}
		String ret = ns.charAt(ns.length()-2) + "" + ns.charAt(ns.length()-1);
		return ret;
	}
	
	public static String getFirst2Digits(int n) {
		String ns = n+"";
		if(ns.length() < 2) {
			return "";
		}
		String ret = ns.charAt(0) + "" + ns.charAt(1);
		return ret;
	}
	
	
	public static boolean isFourDigits(int n) {
		String ns = "" + n;
		return ns.length() == 4;
	}
	
	public static boolean isFiveDigits(int n) {
		String ns = "" + n;
		return ns.length() == 5;
	}

	
	public static void getFirstAndLastIndexes() {
		triFirst = getFirst4DigitTriangleNumberIndex();
		squareFirst = getFirst4DigitSquareNumberIndex();
		pentFirst = getFirst4DigitPentagonalNumberIndex();
		hexFirst = getFirst4DigitHexagonalNumberIndex();
		hepFirst = getFirst4DigitHeptagonalNumberIndex();
		octFirst = getFirst4DigitOctagonalNumberIndex();
		
		triLast = getLast4DigitTriangleNumberIndex();
		squareLast = getLast4DigitSquareNumberIndex();
		pentLast = getLast4DigitPentagonalNumberIndex();
		hexLast = getLast4DigitHexagonalNumberIndex();
		hepLast = getLast4DigitHeptagonalNumberIndex();
		octLast = getLast4DigitOctagonalNumberIndex();
		
		System.out.println("First tri " + triFirst + " and last tri " + triLast);
		System.out.println("First square " + squareFirst + " and last square " + squareLast);
		System.out.println("First pent " + pentFirst + " and last pent " +	pentLast);
		System.out.println("First hex " + hexFirst + " and last hex " + hexLast);
		System.out.println("First hep " + hepFirst + " and last hep " + hepLast);
		System.out.println("First oct " + octFirst + " and last oct " + octLast);
		
		
		
	}
	
}
