
public class Problem44 {

	/*
	 Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// pent a b
 pent c = b+b-a+3
 c = pent if c*6== c*3 -1 // cant have 2 pents next to each other sum to the next pent
 
 pent x = b+b-  ? 
 y = how many nums before/after b do you want? positive num for after, neg for before
 x = sqrt(b*6) +1 ) /3 ) - y ) ---------- the sqrt(b*6) here has a decimal that keeps getting closer to .5, it is .49something .499999 -- its .44 at 1, .47 at 2...
 maybe we can test using that....if sqrt(b*6) has decimal .49 we are good? ---- no -other numbs end up with .49
 a = x^2 ) *3 ) -x ) /2
 
 -- so how do we find y so that b+a and b-a are both pentagonal?
 
 
 
 22 +70 = 92
 70 is 3 more pents than 22 to add to a pent, but how do we know how many...how do we know 3?
 same goes for the one before...how do we know how many to minus?
 
 
 22 ::: 35 = 55
 sqrt(55*6) +1 not divisible by 3....
 51 = 73
 
 but we want b + x to be pent and b-x or x-b to be pent
 
It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of D?
	 */
	public static void main(String[] args) {
		//problem();
		//testPents();
		//System.out.println("is pent " + Util.getPentagonalNumber(355689) + " " + Util.isPentagonal(189771819237L) + " " + Util.getPentIndex(189771819237L));
		testPentsFourNine();
	} 
	
	public static void testPentsGood(){ // test pentagonal number creation and solving the index
		int max = 200000000;
		for(int i=1; i < 200000000; i++){
			long pent = getPentagonalNumber(i);
			long ind = getPentIndex(pent);
			if(ind < 0){
				System.out.println("FALSE :::: Test Pent #" + i + " :: pent=" + pent + " :: supposedly was this index:" +ind );//66845
				return;
			}
		}
		System.out.println("All Passed up to n=" + max);
	}
	public static void testPentsFourNine(){ // test pentagonal number creation and solving the index
		int max = 100;
		for(int i=1; i < max; i++){
			long pent = getPentagonalNumber(i);
			long ind = getPentIndex(pent);
			double a = Math.sqrt(i*6);
			
			if(isPentagonal(i)){
				System.out.println(i + " TRUE::: sqrt " + a + "   Test Pent #" + i + " :: pent=" + pent + " :: supposedly was this index:" +ind  +" ;; " + (a - (int)a));//66845
			} else {
				
				System.out.println(i + " FALSE :::: sqrt " + a + "    Test Pent #" + i + " :: pent=" + pent + " :: supposedly was this index:" +ind  +" ;; " + (a - (int)a));//66845
			}
			
			/*if(ind < 0){
				System.out.println("FALSE :::: sqrt " + a + "    Test Pent #" + i + " :: pent=" + pent + " :: supposedly was this index:" +ind );//66845
				return;
			} else{
				System.out.println("TRUE::: sqrt " + a + "   Test Pent #" + i + " :: pent=" + pent + " :: supposedly was this index:" +ind );
			}*/
		}
		System.out.println("All Passed up to n=" + max);
	}
	public static long getPentagonalNumber(long n){
		return n * (3*n - 1) /2;
	}
	
	public static long getPentIndex(long n){
		long sqr =  (long)(Math.sqrt(n*6) + 1) / 3;
		if(getPentagonalNumber(sqr) == n){
			return sqr;
		}
		return -1;
	}
	
	
	public static boolean isPentagonal(long n){//1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
		return getPentIndex(n) > 0;
		
	}
	

	private static void problem(){
		int run = 1;
		for(int i=1; i < 20; i++){
			run += 3;
			long a = Util.getPentagonalNumber(i);
			long b = Util.getPentagonalNumber(i+1);
			System.out.println(b + " - " + a + " = " + (b-a) + " :: " + run + " " + ((b-a) == run ? " TRUE" : "FALSE"));
			
			long sum = a+b;
			long dif = b-a;
			
			//if sum and dif are pentagonal - gooooooood
			// so how do we know if they are....
			// sum will be bigger... and we know b is pentagonal, and all pentagonals are 1+3*i (i being the pentagonal number index...
			// so maybe the sum - b, which is just a...but thats how far away it is from b
			// and pent numbers can only go up to the next one in multiples of 3
			// so sum - a - 1 / 3 if it is whole number it should be good?
			long nextPentAfterB = dif+3 + b;
			long ip = (int)((a-1)/3);
			double dp = ((a-1)/3) ;
			boolean isPent = dp- ip == 0;
			System.out.println("a="+a + " b="+b + " next=" + nextPentAfterB);
			System.out.println(isPent ? " YES! " + ip : " NO!!! " + ip);
			
			
			
		}
		System.out.println("Pent : " + Util.getPentagonalNumber(4));
		
		int test = 22;

		System.out.println("is pent ? " + Util.isPentagonal(test));
		
	}
	
	
/**/
	


}
